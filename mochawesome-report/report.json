{
  "stats": {
    "suites": 3,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-23T19:37:25.153Z",
    "end": "2023-05-23T19:37:38.186Z",
    "duration": 13033
  },
  "results": [
    {
      "uuid": "e025b5d8-0696-4ee7-9ed7-331abacabee6",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtosContract.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "d9820efa-32a9-47a6-90b3-aeb135a28059",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar os produtos cadastrados",
              "fullTitle": "Testes da Funcionalidade Produtos Deve listar os produtos cadastrados",
              "timedOut": null,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[9].nome).to.equal('Produto EBAC 436746')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "6b6e24ac-5d04-4c0f-85bb-c72d882a1be8",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um produto com sucesso",
              "fullTitle": "Testes da Funcionalidade Produtos Deve cadastrar um produto com sucesso",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "0d1cd87b-7d4f-46b9-ac6f-0e15a4892fa5",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 89,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo 1', 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "4b7899de-0c9f-4966-9f78-84122a07c604",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 120,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto Editado 45642083\",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "3d6137e5-8ab2-4a76-8660-babff8ad19d7",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "e68a7c91-1486-43dc-a761-4c0e77da7646",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "f956eb16-062b-44de-9d83-868cca71d7d2",
              "parentUUID": "ec137d9b-bfef-47cf-b939-6d46c6a6ef39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9820efa-32a9-47a6-90b3-aeb135a28059",
            "6b6e24ac-5d04-4c0f-85bb-c72d882a1be8",
            "0d1cd87b-7d4f-46b9-ac6f-0e15a4892fa5",
            "4b7899de-0c9f-4966-9f78-84122a07c604",
            "3d6137e5-8ab2-4a76-8660-babff8ad19d7",
            "e68a7c91-1486-43dc-a761-4c0e77da7646",
            "f956eb16-062b-44de-9d83-868cca71d7d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 747,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "98146b9e-cb1f-4443-b582-3d3483388bcf",
      "title": "",
      "fullFile": "cypress\\e2e\\usuarios.cy.js",
      "file": "cypress\\e2e\\usuarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuariosContract.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "826f9455-d9be-425e-a343-15bbb513b8b8",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  //expect(response.duration).to.be.lessThan(20) //desnecessario essa validacao no momento\n});",
              "err": {},
              "uuid": "5277d706-7069-4245-a024-b0cf6c333861",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = `Usuario EBAC ${Math.floor(Math.random() * 100000000)}`;\nlet email = `emailteste${Math.floor(Math.random() * 10000)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": user,\n    \"email\": email + \"@qa.com.br\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "a82d844c-8d46-4377-b25e-1433b524fa97",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario(token, 'usuario123', \"beltrano@qa.com.br\", \"trocarasenha\") //token, usuario, email, senha\n.then(response => {\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "fd82cfcc-0f92-4be7-8a8a-9ffa3177dc20",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = `Usuario EBAC ${Math.floor(Math.random() * 100000000)}`;\nlet email = `emailteste${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarUsuario(token, user, email, \"trocarasenha\") //token, usuario, email, senha\n.then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": user,\n      \"email\": email + \"@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.status).to.equal(201);\n    expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n    // expect(response.status).to.equal(400)\n    // expect(response.body.message).to.equal('Este email já está sendo usado')\n  });\n});",
              "err": {},
              "uuid": "1807a24f-8eb5-4003-a3fa-ee6a32ff2048",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let user = `Usuario EBAC ${Math.floor(Math.random() * 100000000)}`;\nlet email = `emailteste${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarUsuario(token, user, email, \"trocarasenha\") //token, usuario, email, senha\n.then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "6ba32e99-0d40-424c-8d3e-1f8cc4c63c75",
              "parentUUID": "bdb9e723-a08f-4b47-99d1-2e609f25ce28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "826f9455-d9be-425e-a343-15bbb513b8b8",
            "5277d706-7069-4245-a024-b0cf6c333861",
            "a82d844c-8d46-4377-b25e-1433b524fa97",
            "fd82cfcc-0f92-4be7-8a8a-9ffa3177dc20",
            "1807a24f-8eb5-4003-a3fa-ee6a32ff2048",
            "6ba32e99-0d40-424c-8d3e-1f8cc4c63c75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 588,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "39132abc-99f3-4826-9d77-c8ee0adec3f3",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a22cca61-34f8-44fa-addf-99baea5b5052",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "8d0d6a10-21e7-46d4-a8f9-b3b5de1a952b",
              "parentUUID": "a22cca61-34f8-44fa-addf-99baea5b5052",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d0d6a10-21e7-46d4-a8f9-b3b5de1a952b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}